<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.atguigu.jxc.dao.GoodsDao">

    <select id="getMaxCode" resultType="java.lang.String">
        SELECT
            MAX( goods_code )
        FROM
            t_goods
    </select>

    <resultMap id="BaseResultMap" type="com.atguigu.jxc.entity.Goods" autoMapping="true">
        <id column="goods_id" property="goodsId"></id>
    </resultMap>

    <resultMap id="GoodsMap" type="com.atguigu.jxc.entity.Goods" autoMapping="true">
        <id column="goods_id" property="goodsId"></id>
    </resultMap>

    <resultMap id="BaseResultMap" type="com.atguigu.jxc.entity.Goods">
        <id column="goods_id" property="goodsId"></id>
        <result column="goods_name" property="goodsName"></result>
        <result column="goods_code" property="goodsCode"></result>
        <result column="goods_type_id" property="goodsTypeId"></result>
        <result column="inventory_quantity" property="inventoryQuantity"></result>
        <result column="last_purchasing_price" property="lastPurchasingPrice"></result>
        <result column="min_num" property="minNum"></result>
        <result column="goods_model" property="goodsModel"></result>
        <result column="goods_producer" property="goodsProducer"></result>
        <result column="purchasing_price" property="purchasingPrice"></result>
        <result column="remarks" property="remarks"></result>
        <result column="selling_price" property="sellingPrice"></result>
        <result column="state" property="state"></result>
        <result column="goods_unit" property="goodsUnit"></result>
        <result column="goods_type_name" property="goodsTypeName"></result>
    </resultMap>

    <select id="getGoodsInventoryList" resultMap="BaseResultMap">
        SELECT
        t_goods.goods_id,
        t_goods.goods_name,
        t_goods.goods_code,
        t_goods.goods_type_id,
        t_goods_type.p_id,
        t_goods.inventory_quantity,
        t_goods.last_purchasing_price,
        t_goods.min_num,
        t_goods.goods_model,
        t_goods.goods_producer,
        t_goods.purchasing_price,
        t_goods.remarks,
        t_goods.selling_price,
        t_goods.state,
        t_goods.goods_unit,
        t_goods_type.goods_type_name
        FROM
        t_goods
        LEFT JOIN t_goods_type ON t_goods.goods_type_id = t_goods_type.goods_type_id
        <where>
            <if test="codeOrName != null and codeOrName != ''">
                AND
                (
                t_goods.goods_name LIKE CONCAT('%', #{codeOrName} ,'%')  OR
                t_goods.goods_code LIKE CONCAT('%', #{codeOrName} ,'%')
                )
            </if>
            <if test="goodsTypeId != null and goodsTypeId != 1">
                AND
                (
                t_goods.goods_type_id = #{goodsTypeId} OR
                t_goods_type.p_id = #{goodsTypeId}
                )
            </if>
        </where>
        LIMIT #{offSet}, #{pageRow}
    </select>
    
    <select id="getGoodsInventoryCount" resultMap="BaseResultMap">
        SELECT
        count(*)
        FROM
        t_goods
        LEFT JOIN t_goods_type ON t_goods.goods_type_id = t_goods_type.goods_type_id
        <where>
            <if test="codeOrName != null and codeOrName != ''">
                AND
                (
                t_goods.goods_name LIKE CONCAT('%', #{codeOrName} ,'%')  OR
                t_goods.goods_code LIKE CONCAT('%', #{codeOrName} ,'%')
                )
            </if>
            <if test="goodsTypeId != null and goodsTypeId != 1">
                AND
                (
                t_goods.goods_type_id = #{goodsTypeId} OR
                t_goods_type.p_id = #{goodsTypeId}
                )
            </if>
        </where>
    </select>

    <select id="getGoodsList" resultMap="BaseResultMap">
        select
        t_goods.goods_id,
        t_goods.goods_name,
        t_goods.goods_code,
        t_goods.goods_type_id,
        t_goods_type.p_id,
        t_goods.inventory_quantity,
        t_goods.last_purchasing_price,
        t_goods.min_num,
        t_goods.goods_model,
        t_goods.goods_producer,
        t_goods.purchasing_price,
        t_goods.remarks,
        t_goods.selling_price,
        t_goods.state,
        t_goods.goods_unit,
        t_goods_type.goods_type_name
        FROM
        t_goods
        LEFT JOIN t_goods_type ON t_goods.goods_type_id = t_goods_type.goods_type_id
        <where>
            <if test="goodsName != null and goodsName != ''">
                AND
                (
                t_goods.goods_name LIKE CONCAT('%', #{goodsName} ,'%')
                )
            </if>
            <if test="goodsTypeId != null and goodsTypeId != 1">
                AND
                (
                t_goods.goods_type_id = #{goodsTypeId} OR
                t_goods_type.p_id = #{goodsTypeId}
                )
            </if>
        </where>
        LIMIT #{offSet}, #{rows}
    </select>

    <insert id="saveGoods" useGeneratedKeys="true" keyProperty="goodsId" parameterType="com.atguigu.jxc.entity.Goods">
        insert into t_goods
        (
            goods_id,
            goods_code,
            goods_name,
            inventory_quantity,
            min_num,
            goods_model,
            goods_producer,
            purchasing_price,
            last_purchasing_price,
            remarks,
            selling_price,
            state,
            goods_unit,
            goods_type_id
        )
        values
        (
            #{goodsId},
            #{goodsCode},
            #{goodsName},
            #{inventoryQuantity},
            #{minNum},
            #{goodsModel},
            #{goodsProducer},
            #{purchasingPrice},
            #{lastPurchasingPrice},
            #{remarks},
            #{sellingPrice},
            #{state},
            #{goodsUnit},
            #{goodsTypeId}
        )
    </insert>

    <update id="updateGoods" parameterType="com.atguigu.jxc.entity.Goods">
        update t_goods
        set
            goods_id = #{goodsId},
            goods_code = #{goodsCode},
            goods_name = #{goodsName},
            min_num =  #{minNum},
            goods_model = #{goodsModel},
            goods_producer = #{goodsProducer},
            purchasing_price = #{purchasingPrice},
            last_purchasing_price =#{lastPurchasingPrice},
            remarks = #{remarks},
            selling_price = #{sellingPrice},
            goods_unit =  #{goodsUnit},
            goods_type_id = #{goodsTypeId}
        where goods_id = #{goodsId}
    </update>

    <delete id="deleteGoods">
        delete from t_goods where goods_id = #{goodsId}
    </delete>

    <select id="selectGoodsById" resultMap="GoodsMap">
        select * from t_goods where goods_id =#{goodsId}
    </select>

    <select id="getNoInventoryQuantity" resultMap="BaseResultMap">
        SELECT
        t_goods.goods_id,
        t_goods.goods_code,
        t_goods.goods_name,
        t_goods.goods_model,
        t_goods_type.goods_type_name,
        t_goods.goods_unit,
        inventory_quantity
        FROM
        t_goods
        LEFT JOIN t_goods_type ON t_goods.goods_type_id = t_goods_type.goods_type_id
        <where>
            <if test="nameOrCode != null and nameOrCode != ''">
                (
                t_goods.goods_name LIKE CONCAT('%', #{nameOrCode} ,'%')  OR
                t_goods.goods_code LIKE CONCAT('%', #{nameOrCode} ,'%')

                )
            </if>
        </where>
        LIMIT #{offSet}, #{rows}
    </select>


    <select id="getHasInventoryQuantity" resultMap="BaseResultMap">
        SELECT
        t_goods.goods_id,
        t_goods.goods_name,
        t_goods.goods_code,
        t_goods.goods_type_id,
        t_goods_type.p_id,
        t_goods.inventory_quantity,
        t_goods.last_purchasing_price,
        t_goods.min_num,
        t_goods.goods_model,
        t_goods.goods_producer,
        t_goods.purchasing_price,
        t_goods.remarks,
        t_goods.selling_price,
        t_goods.state,
        t_goods.goods_unit,
        t_goods_type.goods_type_name
        FROM
        t_goods
        LEFT JOIN t_goods_type ON t_goods.goods_type_id = t_goods_type.goods_type_id
        <where>
            <if test="nameOrCode != null and nameOrCode != ''">
                (
                t_goods.goods_name LIKE CONCAT('%', #{nameOrCode} ,'%')  OR
                t_goods.goods_code LIKE CONCAT('%', #{nameOrCode} ,'%')

                )
            </if>
        </where>
        LIMIT #{offSet}, #{rows}
    </select>

    <update id="saveStock" parameterType="com.atguigu.jxc.entity.Goods">
        update t_goods
        set
           inventory_quantity =#{inventoryQuantity},
           purchasing_price = #{purchasingPrice}
        where goods_id = #{goodsId}
    </update>

    <delete id="deleteStock">
        delete from t_goods where goods_id = #{goodsId}
    </delete>

    <!--查询所有 当前库存量(inventory_quantity)小于 库存下限(min_num)的商品信息-->
    <select id="selectListAlarm" resultMap="BaseResultMap">
        SELECT
            t_goods.goods_id,
            t_goods.goods_name,
            t_goods.goods_code,
            t_goods.goods_type_id,
            t_goods.inventory_quantity,
            t_goods.last_purchasing_price,
            t_goods.min_num,
            t_goods.goods_model,
            t_goods.goods_producer,
            t_goods.purchasing_price,
            t_goods.remarks,
            t_goods.selling_price,
            t_goods.state,
            t_goods.goods_unit,
            t_goods_type.goods_type_name
        FROM
        t_goods
        LEFT JOIN t_goods_type ON t_goods.goods_type_id = t_goods_type.goods_type_id
        where inventory_quantity &lt; min_num
    </select>
</mapper>
